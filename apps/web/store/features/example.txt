import { getCurrentUser } from "@/lib/actions/user";
import { createAppSlice } from "@/store";

export interface AuthState {
  currentUser: IUser | null;
  isLoading: boolean;
}

const initialState: AuthState = {
  currentUser: null,
  isLoading: false,
};

const authSlice = createAppSlice({
  name: "auth",
  initialState,

  reducers: (create) => ({
    clearUser: create.reducer((state) => {
      state.currentUser = null;
    }),

    setUser: create.asyncThunk(
      async () => {
        return await getCurrentUser();
      },
      {
        pending: (state) => {
          state.isLoading = true;
        },
        fulfilled: (state, action) => {
          state.isLoading = false;
          state.currentUser = action.payload || null;
        },
        rejected: (state) => {
          state.isLoading = false;
        },
      }
    ),
  }),
});

export const { clearUser } = authSlice.actions;
export default authSlice.reducer;
